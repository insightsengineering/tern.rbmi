[{"path":"https://insightsengineering.github.io/tern.rbmi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"NEST. Author, maintainer. Roche. Copyright holder, funder. Jana Stoilova. Author. Joe Zhu. Author. Pawel Rucki. Author.","code":""},{"path":"https://insightsengineering.github.io/tern.rbmi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"NEST, Stoilova J, Zhu J, Rucki P (2022). tern.rbmi: Create TLGs using rbmi tern. https://github.com/insightsengineering/tern.rbmi, https://insightsengineering.github.io/tern.rbmi/.","code":"@Manual{,   title = {tern.rbmi: Create TLGs using rbmi and tern},   author = {{NEST} and Jana Stoilova and Joe Zhu and Pawel Rucki},   year = {2022},   note = {https://github.com/insightsengineering/tern.rbmi, https://insightsengineering.github.io/tern.rbmi/}, }"},{"path":[]},{"path":"https://insightsengineering.github.io/tern.rbmi/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Create TLGs using rbmi and tern","text":"nesttemplate provides custom pkgdown template NEST packages. Please don’t use package. order take full advantage template need use pkgdown >= 2.0.0.","code":""},{"path":"https://insightsengineering.github.io/tern.rbmi/index.html","id":"templates","dir":"","previous_headings":"","what":"Templates","title":"Create TLGs using rbmi and tern","text":"Please ensure _pkgdown.yml file contains:","code":"template:     package: nesttemplate"},{"path":"https://insightsengineering.github.io/tern.rbmi/index.html","id":"example-sites","dir":"","previous_headings":"","what":"Example sites","title":"Create TLGs using rbmi and tern","text":"tern teal teal.modules.general teal.modules.clinical","code":""},{"path":"https://insightsengineering.github.io/tern.rbmi/pull_request_template.html","id":null,"dir":"","previous_headings":"","what":"Pull Request","title":"Pull Request","text":"Fixes #nnn","code":""},{"path":"https://insightsengineering.github.io/tern.rbmi/reference/tabulate_rbmi.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulation of RBMI Results — tabulate_rbmi","title":"Tabulation of RBMI Results — tabulate_rbmi","text":"functions can used produce tables fitted RBMI produced","code":""},{"path":"https://insightsengineering.github.io/tern.rbmi/reference/tabulate_rbmi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulation of RBMI Results — tabulate_rbmi","text":"","code":"h_tidy_pool(x)  # S3 method for pool tidy(x)  s_rbmi_lsmeans(df, .in_ref_col, show_relative = c(\"reduction\", \"increase\"))  a_rbmi_lsmeans(df, .in_ref_col, show_relative = c(\"reduction\", \"increase\"))  summarize_rbmi(   lyt,   ...,   table_names = \"rbmi_summary\",   .stats = NULL,   .formats = NULL,   .indent_mods = NULL,   .labels = NULL )"},{"path":"https://insightsengineering.github.io/tern.rbmi/reference/tabulate_rbmi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulation of RBMI Results — tabulate_rbmi","text":"x (pool) list pooled object rbmi analysis results. list includes analysis results, confidence level, hypothesis testing type. df input dataframe .in_ref_col boolean variable, reference column specified show_relative \"reduction\" (control - treatment, default) \"increase\" (treatment - control) shown relative change baseline? lyt (layout) input layout analyses added . ... additional argument. table_names (character) can customized case vars analyzed multiple times, avoid warnings rtables. .stats (character) statistics select table. .formats (named character list) formats statistics. .indent_mods (named integer) indent modifiers labels. .labels (named character) labels statistics (without indent).","code":""},{"path":"https://insightsengineering.github.io/tern.rbmi/reference/tabulate_rbmi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabulation of RBMI Results — tabulate_rbmi","text":"dataframe","code":""},{"path":"https://insightsengineering.github.io/tern.rbmi/reference/tabulate_rbmi.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Tabulation of RBMI Results — tabulate_rbmi","text":"h_tidy_pool: Helper function produce data frame results pool single visit tidy.pool: Helper method (broom::tidy()) prepare data frame pool rbmi object containing LS means contrasts multiple visits s_rbmi_lsmeans: Statistics function extracting estimates tidied LS means data frame. a_rbmi_lsmeans: Formatted Analysis function can customized calling rtables::make_afun() . used afun rtables::analyze(). summarize_rbmi: Analyze function tabulating LS means estimates tidied rbmi pool results.","code":""},{"path":"https://insightsengineering.github.io/tern.rbmi/reference/tabulate_rbmi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulation of RBMI Results — tabulate_rbmi","text":"","code":"library(rtables) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(broom) library(rbmi)  data <- antidepressant_data levels(data$THERAPY) <- c(\"PLACEBO\", \"DRUG\") # This is important! The order defines the computation order later missing_var <- \"CHANGE\" vars <- list(   id = \"PATIENT\",   visit = \"VISIT\",   expand_vars = c(\"BASVAL\", \"THERAPY\"),   group = \"THERAPY\" ) covariates <- list(   draws = c(\"BASVAL*VISIT\", \"THERAPY*VISIT\"),   analyse = c(\"BASVAL\") ) draws_vars <- set_vars(   outcome = missing_var,   visit = vars$visit,   group = vars$group,   covariates = covariates$draws ) impute_references <- c(\"DRUG\" = \"PLACEBO\", \"PLACEBO\" = \"PLACEBO\") draws_method <- method_bayes() analyse_fun <- ancova analyse_fun_args <- list(   vars = set_vars(     outcome = missing_var,     visit = vars$visit,     group = vars$group,     covariates = covariates$analyse   ) ) pool_args <- list(   conf.level = formals(pool)$conf.level,   alternative = formals(pool)$alternative,   type = formals(pool)$type ) debug_mode <- FALSE  data <- data %>%   dplyr::select(PATIENT, THERAPY, VISIT, BASVAL, THERAPY, CHANGE) %>%   dplyr::mutate(dplyr::across(.cols = vars$id, ~ as.factor(.x))) %>%   dplyr::arrange(dplyr::across(.cols = c(vars$id, vars$visit))) data_full <- do.call(   expand_locf,   args = list(     data = data,     vars = c(vars$expand_vars, vars$group),     group = vars$id,     order = c(vars$id, vars$visit)   ) %>%     append(lapply(data[c(vars$id, vars$visit)], levels)) )  data_full <- data_full %>%   dplyr::group_by(dplyr::across(vars$id)) %>%   dplyr::mutate(!!vars$group := Filter(Negate(is.na), .data[[vars$group]])[1])  # there are duplicates - use first value data_full <- data_full %>%   dplyr::group_by(dplyr::across(c(vars$id, vars$group, vars$visit))) %>%   dplyr::slice(1) %>%   dplyr::ungroup() # need to have a single ID column data_full <- data_full %>%   tidyr::unite(\"TMP_ID\", dplyr::all_of(vars$id), sep = \"_#_\", remove = FALSE) %>%   dplyr::mutate(TMP_ID = as.factor(TMP_ID)) draws_vars$subjid <- \"TMP_ID\"  data_ice <- data_full %>%   dplyr::arrange(dplyr::across(.cols = c(\"TMP_ID\", vars$visit))) %>%   dplyr::filter(is.na(.data[[missing_var]])) %>%   dplyr::group_by(TMP_ID) %>%   dplyr::slice(1) %>%   dplyr::ungroup() %>%   dplyr::select(all_of(c(\"TMP_ID\", vars$visit))) %>%   dplyr::mutate(strategy = \"MAR\")  draws_obj <- draws(   data = data_full,   data_ice = data_ice,   vars = draws_vars,   method = draws_method ) #>  #> SAMPLING FOR MODEL 'MMRM' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000837 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 8.37 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 1200 [  0%]  (Warmup) #> Chain 1: Iteration:  120 / 1200 [ 10%]  (Warmup) #> Chain 1: Iteration:  201 / 1200 [ 16%]  (Sampling) #> Chain 1: Iteration:  320 / 1200 [ 26%]  (Sampling) #> Chain 1: Iteration:  440 / 1200 [ 36%]  (Sampling) #> Chain 1: Iteration:  560 / 1200 [ 46%]  (Sampling) #> Chain 1: Iteration:  680 / 1200 [ 56%]  (Sampling) #> Chain 1: Iteration:  800 / 1200 [ 66%]  (Sampling) #> Chain 1: Iteration:  920 / 1200 [ 76%]  (Sampling) #> Chain 1: Iteration: 1040 / 1200 [ 86%]  (Sampling) #> Chain 1: Iteration: 1160 / 1200 [ 96%]  (Sampling) #> Chain 1: Iteration: 1200 / 1200 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 1.11401 seconds (Warm-up) #> Chain 1:                3.78426 seconds (Sampling) #> Chain 1:                4.89827 seconds (Total) #> Chain 1:  #> Warning: The largest R-hat is 1.34, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat impute_obj <- impute( # @TODO: add support of `update_stategy` argument   draws_obj,   references = impute_references )  ref_levels <- levels(impute_obj$data$group[[1]]) names(ref_levels) <- c(\"ref\", \"alt\") analyse_fun_args$vars$subjid <- \"TMP_ID\" analyse_obj <- do.call(   analyse,   args = list(     imputations = impute_obj,     fun = analyse_fun   ) %>%     append(analyse_fun_args) ) pool_obj <- do.call(   pool,   args = list(     results = analyse_obj   ) %>%     append(pool_args) )  h_tidy_pool(pool_obj$pars[1:3]) #>   group       est    se_est lower_cl_est upper_cl_est   est_contr  se_contr #> 1   ref -1.615820 0.4862316    -2.575771   -0.6558685          NA        NA #> 2   alt -1.707626 0.4749573    -2.645319   -0.7699335 -0.09180645 0.6826279 #>   lower_cl_contr upper_cl_contr   p_value relative_reduc #> 1             NA             NA        NA             NA #> 2      -1.439497       1.255884 0.8931772     0.05681725 df <- tidy(pool_obj) df #>   group       est    se_est lower_cl_est upper_cl_est   est_contr  se_contr #> 1   ref -1.615820 0.4862316    -2.575771   -0.6558685          NA        NA #> 2   alt -1.707626 0.4749573    -2.645319   -0.7699335 -0.09180645 0.6826279 #> 3   ref -4.245500 0.6571683    -5.543603   -2.9473974          NA        NA #> 4   alt -2.847870 0.6465745    -4.125312   -1.5704272  1.39763046 0.9322275 #> 5   ref -6.419784 0.7118916    -7.826790   -5.0127774          NA        NA #> 6   alt -4.165000 0.6837408    -5.515645   -2.8143547  2.25478384 0.9982844 #> 7   ref -7.724398 0.7667702    -9.239769   -6.2090274          NA        NA #> 8   alt -4.876283 0.7550742    -6.368977   -3.3835883  2.84811554 1.0830766 #>   lower_cl_contr upper_cl_contr     p_value relative_reduc visit conf_level #> 1             NA             NA          NA             NA     4       0.95 #> 2     -1.4394968       1.255884 0.893177243     0.05681725     4       0.95 #> 3             NA             NA          NA             NA     5       0.95 #> 4     -0.4443610       3.239622 0.135913471    -0.32920278     5       0.95 #> 5             NA             NA          NA             NA     6       0.95 #> 6      0.2818210       4.227747 0.025387016    -0.35122426     6       0.95 #> 7             NA             NA          NA             NA     7       0.95 #> 8      0.7071577       4.989073 0.009485126    -0.36871682     7       0.95  afun <- make_afun(a_rbmi_lsmeans)  basic_table() %>%   split_cols_by(\"group\", ref_group = levels(df$group)[1]) %>%   split_rows_by(\"visit\", split_label = \"Visit\", label_pos = \"topleft\") %>%   summarize_rbmi() %>%   build_table(df) #> Visit                                       ref                alt        #> ————————————————————————————————————————————————————————————————————————— #> 4                                                                         #>   Adjusted Mean (SE)                   -1.616 (0.486)     -1.708 (0.475)  #>     95% CI                            (-2.576, -0.656)   (-2.645, -0.770) #>   Difference in Adjusted Means (SE)                       -0.092 (0.683)  #>     95% CI                                               (-1.439, 1.256)  #>     Relative Reduction (%)                                     5.7%       #>     p-value (RBMI)                                            0.8932      #> 5                                                                         #>   Adjusted Mean (SE)                   -4.246 (0.657)     -2.848 (0.647)  #>     95% CI                            (-5.544, -2.947)   (-4.125, -1.570) #>   Difference in Adjusted Means (SE)                       1.398 (0.932)   #>     95% CI                                               (-0.444, 3.240)  #>     Relative Reduction (%)                                    -32.9%      #>     p-value (RBMI)                                            0.1359      #> 6                                                                         #>   Adjusted Mean (SE)                   -6.420 (0.712)     -4.165 (0.684)  #>     95% CI                            (-7.827, -5.013)   (-5.516, -2.814) #>   Difference in Adjusted Means (SE)                       2.255 (0.998)   #>     95% CI                                                (0.282, 4.228)  #>     Relative Reduction (%)                                    -35.1%      #>     p-value (RBMI)                                            0.0254      #> 7                                                                         #>   Adjusted Mean (SE)                   -7.724 (0.767)     -4.876 (0.755)  #>     95% CI                            (-9.240, -6.209)   (-6.369, -3.384) #>   Difference in Adjusted Means (SE)                       2.848 (1.083)   #>     95% CI                                                (0.707, 4.989)  #>     Relative Reduction (%)                                    -36.9%      #>     p-value (RBMI)                                            0.0095"},{"path":"https://insightsengineering.github.io/tern.rbmi/reference/tern.rbmi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tern.rbmi Package — tern.rbmi-package","title":"tern.rbmi Package — tern.rbmi-package","text":"tern.rbmi analysis package create tables, listings graphs analyze clinical trials data.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/tern.rbmi/reference/tern.rbmi-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tern.rbmi Package — tern.rbmi-package","text":"Maintainer: NEST basel.nestcicd@roche.com Authors: Jana Stoilova jana.stoilova@roche.com Joe Zhu joe.zhu@roche.com Pawel Rucki pawel.rucki@roche.com contributors: Roche [copyright holder, funder]","code":""},{"path":"https://insightsengineering.github.io/tern.rbmi/news/index.html","id":"ternrbmi-0009006","dir":"Changelog","previous_headings":"","what":"tern.rbmi 0.0.0.9006","title":"tern.rbmi 0.0.0.9006","text":"Initialize package. Add new RBMI analysis function a_rbmi_lsmeans, well corresponding table functions summarize_rbmi.","code":""}]
